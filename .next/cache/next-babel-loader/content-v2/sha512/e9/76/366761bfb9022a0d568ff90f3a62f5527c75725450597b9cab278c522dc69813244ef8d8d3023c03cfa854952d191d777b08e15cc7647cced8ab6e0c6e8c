{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * Ascii generation is based on http://www.nihilogic.dk/labs/jsascii/\n * Maybe more about this later with a blog post at http://lab4games.net/zz85/blog\n *\n * 16 April 2012 - @blurspline\n */\nvar AsciiEffect = function AsciiEffect(renderer) {\n  var charSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' .:-=+*#%@';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  _classCallCheck(this, AsciiEffect);\n\n  // ' .,:;=|iI+hHOE#`$';\n  // darker bolder character set from https://github.com/saw/Canvas-ASCII-Art/\n  // ' .\\'`^\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$'.split('');\n  // Some ASCII settings\n  var bResolution = !options['resolution'] ? 0.15 : options['resolution']; // Higher for more details\n\n  var iScale = !options['scale'] ? 1 : options['scale'];\n  var bColor = !options['color'] ? false : options['color']; // nice but slows down rendering!\n\n  var bAlpha = !options['alpha'] ? false : options['alpha']; // Transparency\n\n  var bBlock = !options['block'] ? false : options['block']; // blocked characters. like good O dos\n\n  var bInvert = !options['invert'] ? false : options['invert']; // black is white, white is black\n\n  var strResolution = 'low';\n  var width, height;\n  var domElement = document.createElement('div');\n  domElement.style.cursor = 'default';\n  var oAscii = document.createElement('table');\n  domElement.appendChild(oAscii);\n  var iWidth, iHeight;\n  var oImg;\n\n  this.setSize = function (w, h) {\n    width = w;\n    height = h;\n    renderer.setSize(w, h);\n    initAsciiSize();\n  };\n\n  this.render = function (scene, camera) {\n    renderer.render(scene, camera);\n    asciifyImage(renderer, oAscii);\n  };\n\n  this.domElement = domElement; // Throw in ascii library from http://www.nihilogic.dk/labs/jsascii/jsascii.js\n\n  /*\n  * jsAscii 0.1\n  * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\n  * MIT License [http://www.nihilogic.dk/licenses/mit-license.txt]\n  */\n\n  function initAsciiSize() {\n    iWidth = Math.round(width * fResolution);\n    iHeight = Math.round(height * fResolution);\n    oCanvas.width = iWidth;\n    oCanvas.height = iHeight; // oCanvas.style.display = \"none\";\n    // oCanvas.style.width = iWidth;\n    // oCanvas.style.height = iHeight;\n\n    oImg = renderer.domElement;\n\n    if (oImg.style.backgroundColor) {\n      oAscii.rows[0].cells[0].style.backgroundColor = oImg.style.backgroundColor;\n      oAscii.rows[0].cells[0].style.color = oImg.style.color;\n    }\n\n    oAscii.cellSpacing = 0;\n    oAscii.cellPadding = 0;\n    var oStyle = oAscii.style;\n    oStyle.display = 'inline';\n    oStyle.width = Math.round(iWidth / fResolution * iScale) + 'px';\n    oStyle.height = Math.round(iHeight / fResolution * iScale) + 'px';\n    oStyle.whiteSpace = 'pre';\n    oStyle.margin = '0px';\n    oStyle.padding = '0px';\n    oStyle.letterSpacing = fLetterSpacing + 'px';\n    oStyle.fontFamily = strFont;\n    oStyle.fontSize = fFontSize + 'px';\n    oStyle.lineHeight = fLineHeight + 'px';\n    oStyle.textAlign = 'left';\n    oStyle.textDecoration = 'none';\n  }\n\n  var aDefaultCharList = ' .,:;i1tfLCG08@'.split('');\n  var aDefaultColorCharList = ' CGO08@'.split('');\n  var strFont = 'courier new, monospace';\n  var oCanvasImg = renderer.domElement;\n  var oCanvas = document.createElement('canvas');\n\n  if (!oCanvas.getContext) {\n    return;\n  }\n\n  var oCtx = oCanvas.getContext('2d');\n\n  if (!oCtx.getImageData) {\n    return;\n  }\n\n  var aCharList = bColor ? aDefaultColorCharList : aDefaultCharList;\n  if (charSet) aCharList = charSet;\n  var fResolution = 0.5;\n\n  switch (strResolution) {\n    case 'low':\n      fResolution = 0.25;\n      break;\n\n    case 'medium':\n      fResolution = 0.5;\n      break;\n\n    case 'high':\n      fResolution = 1;\n      break;\n  }\n\n  if (bResolution) fResolution = bResolution; // Setup dom\n\n  var fFontSize = 2 / fResolution * iScale;\n  var fLineHeight = 2 / fResolution * iScale; // adjust letter-spacing for all combinations of scale and resolution to get it to fit the image width.\n\n  var fLetterSpacing = 0;\n\n  if (strResolution == 'low') {\n    switch (iScale) {\n      case 1:\n        fLetterSpacing = -1;\n        break;\n\n      case 2:\n      case 3:\n        fLetterSpacing = -2.1;\n        break;\n\n      case 4:\n        fLetterSpacing = -3.1;\n        break;\n\n      case 5:\n        fLetterSpacing = -4.15;\n        break;\n    }\n  }\n\n  if (strResolution == 'medium') {\n    switch (iScale) {\n      case 1:\n        fLetterSpacing = 0;\n        break;\n\n      case 2:\n        fLetterSpacing = -1;\n        break;\n\n      case 3:\n        fLetterSpacing = -1.04;\n        break;\n\n      case 4:\n      case 5:\n        fLetterSpacing = -2.1;\n        break;\n    }\n  }\n\n  if (strResolution == 'high') {\n    switch (iScale) {\n      case 1:\n      case 2:\n        fLetterSpacing = 0;\n        break;\n\n      case 3:\n      case 4:\n      case 5:\n        fLetterSpacing = -1;\n        break;\n    }\n  } // can't get a span or div to flow like an img element, but a table works?\n  // convert img element to ascii\n\n\n  function asciifyImage(canvasRenderer, oAscii) {\n    oCtx.clearRect(0, 0, iWidth, iHeight);\n    oCtx.drawImage(oCanvasImg, 0, 0, iWidth, iHeight);\n    var oImgData = oCtx.getImageData(0, 0, iWidth, iHeight).data; // Coloring loop starts now\n\n    var strChars = ''; // console.time('rendering');\n\n    for (var y = 0; y < iHeight; y += 2) {\n      for (var x = 0; x < iWidth; x++) {\n        var iOffset = (y * iWidth + x) * 4;\n        var iRed = oImgData[iOffset];\n        var iGreen = oImgData[iOffset + 1];\n        var iBlue = oImgData[iOffset + 2];\n        var iAlpha = oImgData[iOffset + 3];\n        var iCharIdx = void 0;\n        var fBrightness = void 0;\n        fBrightness = (0.3 * iRed + 0.59 * iGreen + 0.11 * iBlue) / 255; // fBrightness = (0.3*iRed + 0.5*iGreen + 0.3*iBlue) / 255;\n\n        if (iAlpha == 0) {\n          // should calculate alpha instead, but quick hack :)\n          //fBrightness *= (iAlpha / 255);\n          fBrightness = 1;\n        }\n\n        iCharIdx = Math.floor((1 - fBrightness) * (aCharList.length - 1));\n\n        if (bInvert) {\n          iCharIdx = aCharList.length - iCharIdx - 1;\n        } // good for debugging\n        //fBrightness = Math.floor(fBrightness * 10);\n        //strThisChar = fBrightness;\n\n\n        var strThisChar = aCharList[iCharIdx];\n        if (strThisChar === undefined || strThisChar == ' ') strThisChar = '&nbsp;';\n\n        if (bColor) {\n          strChars += '<span style=\\'' + 'color:rgb(' + iRed + ',' + iGreen + ',' + iBlue + ');' + (bBlock ? 'background-color:rgb(' + iRed + ',' + iGreen + ',' + iBlue + ');' : '') + (bAlpha ? 'opacity:' + iAlpha / 255 + ';' : '') + '\\'>' + strThisChar + '</span>';\n        } else {\n          strChars += strThisChar;\n        }\n      }\n\n      strChars += '<br/>';\n    }\n\n    oAscii.innerHTML = '<tr><td>' + strChars + '</td></tr>'; // console.timeEnd('rendering');\n    // return oAscii;\n  }\n};\n\nexport { AsciiEffect };","map":null,"metadata":{},"sourceType":"module"}