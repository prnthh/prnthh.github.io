{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport Section from \"components/Section\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionHeader from \"components/SectionHeader\";\nimport Button from \"react-bootstrap/Button\";\nimport Link from \"next/link\";\nimport Image from \"react-bootstrap/Image\";\nimport \"components/HeroSection.scss\";\nimport * as THREE from 'three/build/three.module';\nimport { AsciiEffect } from '../jslib/AsciiEffect.js';\nimport { TrackballControls } from '../jslib/TrackballControls.js';\n\nfunction HeroSection(props) {\n  let camera, controls, scene, renderer, effect;\n  let sphere, plane;\n  const start = Date.now();\n  useEffect(() => {\n    init();\n    animate();\n  }, []);\n\n  function init() {\n    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.y = 150;\n    camera.position.z = 500;\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0, 0, 0);\n    const pointLight1 = new THREE.PointLight(0xffffff);\n    pointLight1.position.set(500, 500, 500);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0xffffff, 0.25);\n    pointLight2.position.set(-500, -500, -500);\n    scene.add(pointLight2);\n    sphere = new THREE.Mesh(new THREE.SphereGeometry(200, 20, 10), new THREE.MeshPhongMaterial({\n      flatShading: true\n    }));\n    scene.add(sphere); // Plane\n\n    plane = new THREE.Mesh(new THREE.PlaneGeometry(400, 400), new THREE.MeshBasicMaterial({\n      color: 0xe0e0e0\n    }));\n    plane.position.y = -200;\n    plane.rotation.x = -Math.PI / 2;\n    scene.add(plane);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    effect = new AsciiEffect(renderer, ' .:-+*=%@#', {\n      invert: true\n    });\n    effect.setSize(window.innerWidth, window.innerHeight);\n    effect.domElement.style.color = 'white';\n    effect.domElement.style.backgroundColor = 'black'; // Special case: append effect.domElement, instead of renderer.domElement.\n    // AsciiEffect creates a custom domElement (a div container) where the ASCII elements are placed.\n\n    document.getElementById(\"ballDiv\").appendChild(effect.domElement);\n    controls = new TrackballControls(camera, effect.domElement); //\n\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    effect.setSize(window.innerWidth, window.innerHeight);\n  } //\n\n\n  function animate() {\n    requestAnimationFrame(animate);\n    render();\n  }\n\n  function render() {\n    const timer = Date.now() - start;\n    sphere.position.y = Math.abs(Math.sin(timer * 0.002)) * 150;\n    sphere.rotation.x = timer * 0.0003;\n    sphere.rotation.z = timer * 0.0002;\n    controls.update();\n    effect.render(scene, camera);\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      id: \"ballDiv\"\n    })\n  });\n}\n\nexport default HeroSection;","map":null,"metadata":{},"sourceType":"module"}